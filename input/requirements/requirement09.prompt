Reduced Places To Define New LLM. Act as a senior programmer analyzing the code in a TypeScript application where the content of each file in the application's codebase is shown below in a code block. Adding a new LLM provider to this project requires the developer to modify too many source code files. Therefore, establish a process for adding a new LLM provider where the process is as easy as possible, requiring far fewer source code files to be changed by the developer. Document how to implement this architecture plan. For example, the plan could introduce a more declarative or plugin-style architecture, where each LLM provider defines its models, capabilities, required environment variables, and error patterns in a self-contained configuration or manifest, and there could be a central registry that could dynamically load these providers configurations. The plan should not aim to maintain backward compatibility by re-exporting to allow all existing code to remain unchanged. Instead, it should modify all the references in the dependency files to use the modified paths. The plan needs to ensure all existing LLM Providers are ported to the new architecture and are working correctly. Include the list of relative file paths of each source file affected and prefix "TO_DELETE" to the name of each no longer used file and folder that results from the refactoring. Before finishing, run compile, lint, and unit test checks, fixing any problems.