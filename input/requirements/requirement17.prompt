Inconsistent Abstraction for MCP HTTP Server Act as a senior programmer analyzing the code in a TypeScript application where the content of each file in the application's codebase is shown below in a code block. 

Current State: The `McpHttpServer` in `src/features/api/mcpServing/mcp-http-server.ts` is designed to use the Hono web framework. However, the actual server implementation in `src/features/api/mcp-server.service.ts` bypasses Hono and uses a raw Node.js `createServer` call with a custom handler from `mcpHttpServer.createMcpHandler()`. This handler also contains its own CORS logic, which should be part of the server configuration. This mixed-abstraction approach is confusing and leaves the Hono setup largely unused.

Task: Build a list of pros and cons for improving the MCP HTTP Server code to achieve a single, consistent approach for the HTTP server for both the options of:

  1. Refactor the `McpHttpServer` to fully manage the Node.js `http.Server` lifecycle and its request handling (including CORS), removing the unused Hono dependency
 or
  2. Refactot he `McpHttpServer` to fully integrate the `StreamableHTTPServerTransport` as middleware within Hono.
  
Then create two detailed implementation plans, one for each option, for a senior developer to then follow and implement.

Identify any places in the code that would benefit from unit test coverage and/or integration test coverage, realted to the new MCP HTTP server and also include in the plan the compile, lint and unit test validation execution steps.

rovide references to the specific part(s) of the code that needs these improvements with suggestions on how to improve. Include the list or relative file paths of each source file affected.

