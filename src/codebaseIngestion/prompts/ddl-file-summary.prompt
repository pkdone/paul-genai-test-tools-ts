Act as a programmer. Take the content from a database DDL/SQL source code shown below in the section marked 'CODE' and based on its content, return a JSON response containing data that includes the following:

 * A detailed definition of its purpose (you must write at least 2 sentences for this)
 * A detailed definition of its implementation (you must write at least 2 sentences for this)
 * A list of the tables (if any) it defines - for each table, include the table's name and a copy of the command that creates the file used to create the table
 * A list of the stored procedure (if any) it defines - for each stored procedure, include the stored procedure's name, its purpose in detail (you MUST write at least 4 sentences for this purpose), the number of lines of code in the stored procedure, and a complexity score or how complex the stored procedure's code is (the score must be have one of the follinwg values: 'LOW', 'MEDIUM', 'HIGH')
 * A list of the triggers (if any) it defines - for each trigger, include the trigger's name, its purpose in detail (you MUST write at least 4 sentences for this purpose), the number of lines of code in the trigger, and a complexity score or how complex the trigger's code is (the score must be have one of the follinwg values: 'LOW', 'MEDIUM', 'HIGH')
 * The most prominent type of database integration it employs (if any), stating the mechanism used ('NONE', 'DDL', 'DML', 'SQL', 'STORED-PROCEDURE', or 'TRIGGER') and a description of the integration (you MUST write at least 2 sentences for this description)

In the JSON response, do not include any explanations - only provide an RFC8259 compliant JSON response following this format without deviation:
{
  "purpose": "<detailed-purpose>",
  "implementation": "<detailed-implementation>",
  "tables": [
    {
      "name": "<name>",
      "command": "<value>"
    },
    {
      "name": "<name>",
      "command": "<value>"
    }
  ],
  "storedProcedures": [
    {
      "name": "<name>",
      "purpose": "<purpose>",
      "linesOfCode": <value>,
      "complexity"> "<LOW | MEDIUM | HIGH>"

    },
    {
      "name": "<name>",
      "purpose": "<purpose>",
      "linesOfCode": <value>,
      "complexity"> "<LOW | MEDIUM | HIGH>"

    }
  ],
  "triggers": [
    {
      "name": "<name>",
      "purpose": "<purpose>",
      "linesOfCode": <value>,
      "complexity"> "<LOW | MEDIUM | HIGH>"

    },
    {
      "name": "<name>",
      "purpose": "<purpose>",
      "linesOfCode": <value>,
      "complexity"> "<LOW | MEDIUM | HIGH>"

    }
  ],
  "databaseIntegration": {
    "mechanism": "<NONE | DDL | DML | SQL | STORED-PROCEDURE | TRIGGER>",
    "description": "<description>"
  }
}

NEVER ever respond with XML. NEVER use Markdown code blocks to wrap the JSON in your response. NEVER use " or ' quote symbols as part of the text you use for JSON description values, even if you want to quote a piece of existing text, existing message or show a path (ignoring this rule leads to people getting hurt - it is very important).

CODE:
{CONTENT_BLOCK}
