Act as a programmer. Take the content shown below in the section marked 'CODE' and for its content, return a JSON response containing data which includes the detailed purpose of the XML (you must write at least 4 sentences for this purpose), a summary sentence of the implementation, the type of database integration it employs (if any, stating the mechanism used and a description of the integration), a list of detailed descriptions of other external systems (e.g. queues, mail systems, 3rd party web services, external applications) it references (if any), and a list of detailed descriptions of deployable library modules/packages it references (if any).

Note, if any of the following elements are true in the content, you MUST assume that there is database interaction (if you can determine which table(s) of a database the code interacts with, include the name of the table(s) in the description):
    - Code uses a JDBC driver or JDBC API (set mechanism: 'JDBC')
    - Code contains SQL code (set mechanism: 'SQL')
    - Code uses a database driver or library (set mechanism: 'DRIVER')
    - Code uses a database Object-Relational-Mapper (ORM) like JPA, TopLink, Hibernate, etc, (set mechanism: 'ORM')
    - Code uses a Spring Data API (set mechanism: 'SPRING-DATA')
    - Code has a Java class integrating with a database by an Enterprise Java Bean (EJB), which also could be CMP or BMP based (set mechanism: 'EJB')
    - Code uses a 3rd party framework/library for database access (set mechanism: 'OTHER')
    - Otherwise, if the code does not use a database, then set mechanism: 'NONE'

In the JSON response, do NOT include any explanations even if the input content is incomplete - only provide an RFC8259 compliant JSON response following this format without deviation:
{
  "purpose": "<purpose>",
  "implementation": "<implementation>",
  "databaseIntegration": {
    "mechanism": "<mechanism>",
    "description": "<description>"
  },
  "externalSystemActivities": [
      "<detailed-description1>",
      "<detailed-description2>"
  ],
  "deployableModules": [
      "<detailed-description1>",
      "<detailed-description2>"
  ]
}

NEVER use Markdown code blocks to wrap the JSON in your response.

CODE:
```xml
{CONTENT_BLOCK}
```
